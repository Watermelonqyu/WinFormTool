<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSALMongo</name>
    </assembly>
    <members>
        <member name="T:CSALMongo.Model.NamespaceDoc">
            <summary>
            This namespace is for model classes used by CSALDatabase.  Note that the
            data for a turn is modeled via TurnModel. ALSO note that turns are sent to
            us via raw JSON.
            </summary>
        </member>
        <member name="T:CSALMongo.Model.Utils">
            <summary>
            Utility functions that make working with this model easier
            </summary>
        </member>
        <member name="M:CSALMongo.Model.Utils.ParseJson``1(System.String)">
            <summary>
            Given a chunk of JSON, parse it and return the specified type. Note
            that this helper utilizes the BsonDocument functionality from the C#
            MongoDB driver, NOT the JSON library used by ASP.NET (and our Web API).
            Also note that the JSON is tranlated on the fly to handle things like 
            the fields $id, Id, and _id.
            </summary>
            <typeparam name="TModel">The type to return</typeparam>
            <param name="json">The JSON to parse</param>
            <returns>The populated instance of the type TModel</returns>
        </member>
        <member name="M:CSALMongo.Model.Utils.LessonIDSort(System.String)">
            <summary>
            Translation helper that returns a string-sortable version of a
            lesson ID
            </summary>
            <param name="lessonID">Lesson ID to translate</param>
            <returns>The string to use for sorting</returns>
        </member>
        <member name="T:CSALMongo.Model.Class">
            <summary>
            A class of students and lessons
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.Id">
            <summary>
            The MongoDB ID (_id)
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.ClassID">
            <summary>
            The storage key for the class (note the interaction with Id)
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.TeacherName">
            <summary>
            Name of the teacher for this class. Note that this should be an
            email AND that it controls access to the class data in the DB GUI.
            Also note that we check that the email is CONTAINED in this string,
            so you may use a delimited string of emails
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.Location">
            <summary>
            Location of the class.  Note that this can be used to get a list
            of student names across classes
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.MeetingTime">
            <summary>
            Convenience field mainly for display to teachers
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.Students">
            <summary>
            List of students enrolled in this class
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.Lessons">
            <summary>
            List of lessons in this class
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Class.AutoCreated">
            <summary>
            If true, then this class was created automatically as the result
            of posted turn data
            </summary>
        </member>
        <member name="T:CSALMongo.Model.Lesson">
            <summary>
            A lesson presented to a student in a class
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.Id">
            <summary>
            The MongoDB ID (_id)
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.LessonID">
            <summary>
            The storage key for a lesson - note the interaction with Id
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.ShortName">
            <summary>
            Name displayed to user in the GUI
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.LastTurnTime">
            <summary>
            Last time a turn was saved to the database (in StudentLessonActs)
            Note that this field might initially be populated with local time, but
            will be stored in Mongo and retrieved as UTC
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.TurnCount">
            <summary>
            Number of turns posted to the database
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.Students">
            <summary>
            List of students (by ID) that have been assigned this lesson
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.AttemptTimes">
            <summary>
            Each time a student attempts this lesson, the date/time is appended to this list
            Note that this field might initially be populated with local time, but
            will be stored in Mongo and retrieved as UTC
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.StudentsAttempted">
            <summary>
            List of students (by ID) that have attempted this lesson. Size
            should always be less than or equal to size of Students
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.StudentsCompleted">
            <summary>
            List of students (by ID) that have completed this lesson. Size
            should always be less than or equal to size of Students and StudentsAttempted
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.URLs">
            <summary>
            List of URL's seen for this lesson's ID.  Because the lesson ID is
            sent as a URL and then extracted, there should be at least one URL
            in this list if at least one Turn has been posted for the lesson.
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Lesson.AutoCreated">
            <summary>
            If true, then this lesson was created automatically as the result
            of posted turn data
            </summary>
        </member>
        <member name="T:CSALMongo.Model.Student">
            <summary>
            A student enrolled in a class and assigned lessons
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.Id">
            <summary>
            The MongoDB ID (_id)
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.UserID">
            <summary>
            The storage key for a student (AKA a subject ID) - note
            the interaction with Id
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.LastTurnTime">
            <summary>
            The time the last turn was posted to the database for this student
            Note that this field might initially be populated with local time, but
            will be stored in Mongo and retrieved as UTC
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.TurnCount">
            <summary>
            Number of turns posted for this student
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.FirstName">
            <summary>
            Student's first name - note the GUI only displays subject ID and
            in some instances (the student/lesson drill down) actively hides
            the first name
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.LastName">
            <summary>
            Student's last name
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.AutoCreated">
            <summary>
            True if the student was created automatically when a turn was posted
            </summary>
        </member>
        <member name="P:CSALMongo.Model.Student.ReadingURLs">
            <summary>
            List of MediaVisit instances posted to the database to maintain a
            reading history for this student
            </summary>
        </member>
        <member name="T:CSALMongo.Model.MediaVisit">
            <summary>
            Represents a visit to a resource - currently only used for Student.ReadingURLs
            </summary>
        </member>
        <member name="P:CSALMongo.Model.MediaVisit.TargetURL">
            <summary>
            URL visited
            </summary>
        </member>
        <member name="P:CSALMongo.Model.MediaVisit.VisitTime">
            <summary>
            Time of visit (generally per the DB server time)
            Note that this field might initially be populated with local time, but
            will be stored in Mongo and retrieved as UTC
            </summary>
        </member>
        <member name="T:CSALMongo.Model.StudentLessonActs">
            <summary>
            Collection of turns posted for a lesson/student combination
            </summary>
        </member>
        <member name="F:CSALMongo.Model.StudentLessonActs.TURN_ID_START">
            <summary>
            The Turn ID signalling the start of an attempt
            </summary>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.LastAttemptIndex">
            <summary>
            Index of the beginning of the last attempt
            </summary>
            <returns>Index that is the beginning of the last attempt at the lesson. -1 if this index doesn't exist</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.SequenceCompleted(System.Int32,System.Int32)">
            <summary>
            Return true if the lesson described by turns between indexes start
            and end is completed.
            </summary>
            <param name="start">Index where checking begins</param>
            <param name="end">Last index checked - if less than 0, then index is assumed to be last in list</param>
            <returns>True of the lesson specified has been completed</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.LastCompleted">
            <summary>
            Return true if last lesson (as identified by LastAttemptIndex)
            has been completed (as identified by SequenceCompleted)
            </summary>
            <returns>True if last attempt was completed</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.FixupTimestamps">
            <summary>
            Because things can hit the server out of order (or in case of test
            data, simultaneously), we insure that the DB timestamps are correct
            by using the Duration field.  Note that this is a hack to approximate
            time in the event we didn't receive the turns with correct ordering/spacing
            </summary>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.ReadingTime(System.Int32,System.Int32)">
            <summary>
            Return time spent reading (in ms) during lesson described by Turns stored
            from index start to index end
            </summary>
            <param name="start">Index where checking begins</param>
            <param name="end">Last index checked - if less than 0, then index is assumed to be last in list</param>
            <returns>Reading time in milliseconds</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.CurrentReadingTime">
            <summary>
            Total time spent reading (as calculated by ReadingTime) on last
            lesson (as identified by LastAttemptIndex) 
            </summary>
            <returns>Time spent reading in milliseconds</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.TotalTime(System.Int32,System.Int32)">
            <summary>
            Return total time spent (in ms) on the lesson described by Turns stored
            from index start to index end
            </summary>
            <param name="start">Index where checking begins</param>
            <param name="last">Last index checked - if less than 0, then index is assumed to be last in list</param>
            <returns>Total time in milliseconds</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.CurrentTotalTime">
            <summary>
            Total time spent on lesson (as calculated by TotalTime) on last
            lesson (as identified by LastAttemptIndex) 
            </summary>
            <returns>Time spent in milliseconds</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.LessonPath(System.Int32,System.Int32)">
            <summary>
            String representation of the path taken by the lesson attempt
            recorded by Turns from index start to index end
            </summary>
            <param name="start">Index where checking begins</param>
            <param name="end">Last index checked - if less than 0, then index
            is assumed to be last in list</param>
            <returns>A string representing the lesson path.  Each character in
            the string is a path change: E=Easy, M=Medium, and H=Hard.  All
            lessons are assumed to be begin in M</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.CurrentLessonPath">
            <summary>
            Return a string summarizing the student's latest path through the
            lesson.  If they stayed in medium the whole time, return empty
            string.  If their path was (Start/Medium)=>Hard=>Medium=>Easy return
            HME
            </summary>
            <returns>Path as specified</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.CorrectAnswerRate">
            <summary>
            Return the correct answer rate (from 0.0 to 1.0 inclusive) for the
            last lesson
            </summary>
            <returns>correct answer rate (from 0.0 to 1.0 inclusive)</returns>
        </member>
        <member name="M:CSALMongo.Model.StudentLessonActs.AdhocCorrectAnswerRate(System.Int32,System.Int32,System.Double)">
            <summary>
             Return the correct answer rate (from 0.0 to 1.0 inclusive) for the
            lesson recorded by the Turns from index start to index end
            </summary>
            <param name="start">Index where checking begins</param>
            <param name="end">Last index checked - if less than 0, then index
            is assumed to be last in list</param>
            <param name="noAnswers">The value to return if there are no answers
            for the given indexes</param>
            <returns>The correct answer rate (0.0 to 1.0 inclusive) for the turns
            from index start to index end.  If no answers are found in the given
            range, then noAnswers is returned</returns>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.Id">
            <summary>
            The MongoDB ID (_id) - composed of Lesson ID and User ID
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.LessonID">
            <summary>
            Lesson ID of turns posted
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.UserID">
            <summary>
            User ID for turns posted
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.LastTurnTime">
            <summary>
            Date/time of last turn posted
            Note that this field might initially be populated with local time, but
            will be stored in Mongo and retrieved as UTC
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.TurnCount">
            <summary>
            Number of turns posted
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.Turns">
            <summary>
            Actual list of turns posted (see the CSALMongo.TurnModel
            namespace for details)
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.Attempts">
            <summary>
            Number of attempts (lesson starts)
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.Completions">
            <summary>
            Number of lesson completions
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.CorrectAnswers">
            <summary>
            Number of correct answers for last (most recent) lesson attempt
            </summary>
        </member>
        <member name="P:CSALMongo.Model.StudentLessonActs.IncorrectAnswers">
            <summary>
            Number of incorrect answers for last (most recent) lesson attempt
            </summary>
        </member>
        <member name="T:CSALMongo.NamespaceDoc">
            <summary>
            The is the main namespace for the library developed for CSAL turn data storage
            </summary>
        </member>
        <member name="T:CSALMongo.CSALDatabaseException">
            <summary>
            Exception thrown when CSAL Database-specific exceptions occur
            </summary>
        </member>
        <member name="M:CSALMongo.CSALDatabaseException.#ctor(System.String)">
            <summary>
            Delegate construction to base class
            </summary>
            <param name="msg">The exception message to propagate</param>
        </member>
        <member name="T:CSALMongo.CSALDatabase">
            <summary>
            Main interface to the CSAL MongoDB database.  You should instantiate
            with a MongoDB URL (e.g. mongodb://localhost:27017/testdb), insert
            raw turn data via JSON, and the findXXX methods for querying the
            resulting data
            </summary>
        </member>
        <member name="F:CSALMongo.CSALDatabase.CLASS_COLLECTION">
            <summary>MongoDB collection name for classes</summary>
        </member>
        <member name="F:CSALMongo.CSALDatabase.STUDENT_COLLECTION">
            <summary>MongoDB collection name for students</summary>
        </member>
        <member name="F:CSALMongo.CSALDatabase.LESSON_COLLECTION">
            <summary>MongoDB collection name for lessons</summary>
        </member>
        <member name="F:CSALMongo.CSALDatabase.STUDENT_ACT_COLLECTION">
            <summary>MongoDB collection name for turns (actions) tracked for students/lessons</summary>
        </member>
        <member name="M:CSALMongo.CSALDatabase.#ctor(System.String)">
            <summary>
            To construct an instance of this class, you supply a valid
            MongoDB url that includes a database name
            (e.g. mongodb://localhost:27017/testdb)
            </summary>
            <param name="url">MongoDB URL (including database name)</param>
        </member>
        <member name="M:CSALMongo.CSALDatabase.InsureIndexes">
            <summary>
            This very hacky function manually insures all indexes that we want
            in the MongoDB collections that we manage.  Should really only be
            called once in a blue moon.  Currently called on app startup by our
            web api app.
            </summary>
        </member>
        <member name="M:CSALMongo.CSALDatabase.HandleConventions">
            <summary>
            Called only rarely like InsureIndexes above, this function is called
            to set up our Mongo driver conventions correctly
            </summary>
        </member>
        <member name="M:CSALMongo.CSALDatabase.SaveStudentReadingTarget(System.String)">
            <summary>
            Like our "main" function SaveRawStudentLessonAct, it should be a
            JSON object with two fields: UserID and TargetURL.
            </summary>
            <param name="jsonDataRecord">Proper JSON data record formatted as above</param>
        </member>
        <member name="M:CSALMongo.CSALDatabase.SaveRawStudentLessonAct(System.String)">
            <summary>
            Accept a raw JSON data record describing a single CSAL
            student/lesson interaction. The JSON record is expected to be in
            the format described in the document "CSAL Data".  Note that in
            practice just about any record format will be saved in an effort
            to preserve as much data as possible in the event of a system bug.
            HOWEVER, the top-level fields LessonID and UserID MUST be present
            </summary>
            <param name="jsonDataRecord">Proper JSON record formatted as above.</param>
        </member>
        <member name="M:CSALMongo.CSALDatabase.RawContents(MongoDB.Bson.BsonDocument)">
            <summary>
            Given the BSON document, return what we can current figure
            out from these turns
            </summary>
            <param name="doc">A BSON document as required by SaveRawStudentLessonAct</param>
            <returns>A dynamic object with the properties IsAttempt, IsCompletion, CorrectAnswers, and IncorrectAnswers</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.ExtractLessonID(System.String)">
            <summary>
            Given a "full" lesson ID, attempt to extract a "real" lesson ID.
            Note that this is based upon Lesson ID's being transmitted as URL's.
            </summary>
            <param name="fullLessonID"></param>
            <returns></returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindLessons">
            <summary>
            Return all lessons in DB
            </summary>
            <returns>All lessons</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindLessonNames">
            <summary>
            Return a dictionary of Lesson ID => Lesson Short Names - note that
            lessons represent human-created content, so this should be a fairly
            low-effort method
            </summary>
            <returns>All lesson names</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindLessonAnswerTots">
            <summary>
            Return a dictionary of Lesson ID => (CorrectCount, IncorrectCount)
            for all lessons across all students enroller
            </summary>
            <returns>See summary</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindLesson(System.String)">
            <summary>
            Return a single lesson by ID (or null if not found)
            </summary>
            <param name="lessonID">ID of lessong to locate</param>
            <returns>Instance of Model.Lesson or null if not found</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.SaveLesson(CSALMongo.Model.Lesson)">
            <summary>
            Given a single lesson, save it to the database
            </summary>
            <param name="lesson">The populated instance to save to the database</param>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindStudents">
            <summary>
            Return all students in DB
            </summary>
            <returns>All students in database</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindStudentsByLocation(System.String)">
            <summary>
            Return a list of students that are at the given location
            </summary>
            <param name="location">Location - should match Model.Class.Location</param>
            <returns>All students in classes with the given location</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindStudent(System.String)">
            <summary>
            Return a single student by ID (or null if not found)
            </summary>
            <param name="userID">ID of student to locate</param>
            <returns>An instance of Model.Student or null if not found</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.SaveStudent(CSALMongo.Model.Student)">
            <summary>
            Given a student instance, save to the database
            </summary>
            <param name="student">The populated student instance to save</param>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindClasses">
            <summary>
            Return all classes in DB
            </summary>
            <returns>All classes in database</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindClass(System.String)">
            <summary>
            Return a single class by ID (or null if not found)
            </summary>
            <param name="classID">ID of class to locate</param>
            <returns>An instance of Model.Class or null if not found</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.SaveClass(CSALMongo.Model.Class)">
            <summary>
            Given a class (of students, not an ADT), save it to the database
            </summary>
            <param name="clazz">The populated instance to save to the database</param>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindTurns(System.String,System.String)">
            <summary>
            Return all turns matching the given lesson and student.  Note
            that a null or empty string result in no filter.
            </summary>
            <param name="lessonID">Lesson to match. Null or empty string matches nothing (so all lessons)</param>
            <param name="userID">Student to match. Null or empty string matches nothing (so all students)</param>
            <returns>An unordered list of ConvLog instances representing the turns found</returns>
            <example>
            var db = new CSALDatabase("mongodb://localhost:27017/testdb");
            db.findTurns(null, null); //Returns ALL turns
            db.findTurns(null, "Alice"); //Returns turns for student Alice (across all lessons)
            db.findTurns("CheckbookBalancing", null); //Returns ALL turns for lesson CheckbookBalance (all students)
            db.findTurns("CheckbookBalancing", "Bob"); //Returns ALL turns for student Bob in lesson CheckbookBalance
            </example>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindTurnsForStudents(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return all StudentLessonActs instances that match any of the students given
            </summary>
            <param name="studentIDs">Non-null enumerable list of user (student) ID's</param>
            <returns>List of StudentLessonActs instances</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindTurnSummary">
            <summary>
            Really only for dev view - return a tuple for each StudentLessonActs
            instance defined as (LessonID, UserID, TurnCount)
            </summary>
            <returns>List of tuples</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindTurnsRaw(System.String,System.String)">
            <summary>
            Exactly like FindTurns, but returns the raw BsonDocument
            representation of the data.  Since we are very liberal in what we
            accept in SaveRawStudentActLesson, we might have turn data that
            causes exceptions when interpreted with our Model
            </summary>
            <param name="lessonID">Lesson to match. Null or empty string matches nothing (so all lessons)</param>
            <param name="userID">Student to match. Null or empty string matches nothing (so all students)</param>
            <returns>An unordered list of BsonDocument instances representing the turns found</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.DoUpsert(System.String,System.String,MongoDB.Driver.IMongoUpdate)">
            <summary>
            Upsert for the given doc ID in the given collection using the
            specified update.  Note that if ObjectId's are being used for
            the key, we expect it to already be transformed to a string
            </summary>
            <param name="collectionName">Name of MongoDB collection to target (will be created if missing)</param>
            <param name="docId">ID (key) of the document to upsert (will be created if missing)</param>
            <param name="update">Update actions to perform on specified document</param>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindAll``1(System.String)">
            <summary>
            Generic method for finding all documents in a given collection and
            returning them using the specified document type
            </summary>
            <typeparam name="TDocType">Document type to use - see FindAllAs in the Mongo driver for details</typeparam>
            <param name="collectionName">Name of the collection to target</param>
            <returns>List of TDocType instances (or an empty list if nothing found)</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.FindOne``1(System.String,System.String)">
            <summary>
            Generic method for finding single document by key (_id) in a given collection
            and returning it as the specified doc type
            </summary>
            <typeparam name="TDocType">Document type to use - see FindOneAs in the Mongo driver for details</typeparam>
            <param name="collectionName">Name of collection to target</param>
            <param name="docId">Key (_id) of the document - note that this is a string and NOT an ObjectId</param>
            <returns>A TDocType instance, or null if nothing is found</returns>
        </member>
        <member name="M:CSALMongo.CSALDatabase.SaveOne``1(System.String,``0)">
            <summary>
            Generic method for saving a single entity object to the database
            </summary>
            <typeparam name="TDocType"></typeparam>
            <param name="collectionName"></param>
            <param name="doc"></param>
        </member>
        <member name="P:CSALMongo.CSALDatabase.ServerURL">
            <summary>
            MongoDB URL specifying MongoDB database to target.  Note that you
            should specify a database in URL (although it is technically
            optional in the MongoDB spec)
            </summary>
        </member>
        <member name="T:CSALMongo.TurnModel.NamespaceDoc">
            <summary>
            This namespace is for model classes as posted to CSALDatabase in JSON format
            to record a user turn from ACE.
            </summary>
        </member>
        <member name="T:CSALMongo.TurnModel.ConvLog">
            <summary>
            Top-level instance for turns posted to database - see CSALDatabase and Model for
            code interpreting these data structures
            </summary>
        </member>
        <member name="F:CSALMongo.TurnModel.ConvLog.EPOCH_YR">
            <summary>
            Start-of-epoch to be used for our DBTimestamp
            </summary>
        </member>
        <member name="M:CSALMongo.TurnModel.ConvLog.DBDateTime">
            <summary>
            Translation helper DBTimestamp
            </summary>
            <returns>DBTimestamp interpreted as a DateTime</returns>
        </member>
        <member name="M:CSALMongo.TurnModel.ConvLog.AllValidActions">
            <summary>
            The list of all actions in this conv log - and insure every member and property are non-null
            </summary>
            <returns>List of all actions identified.  Should never be null</returns>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.Id">
            <summary>MongoDB key</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.LessonID">
            <summary>ID of lesson in question</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.UserID">
            <summary>User ID (subject ID) of student</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.TurnID">
            <summary>Identifier of turn, greater than or equal to 0</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.Duration">
            <summary>Length of action(s) specified in milliseconds</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.Transitions">
            <summary>Transition list</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.Input">
            <summary>Input specified</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.Assessments">
            <summary>All assessment data</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.ErrorMessage">
            <summary>Error message for current turn</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.WarningMessage">
            <summary>Warning message for current turn</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ConvLog.DBTimestamp">
            <summary>Timestamp applied before DB storage - not usually
            supplied in the POST'ed JSON.  It is the number of milliseconds
            since EPOCH_YR</summary>
        </member>
        <member name="T:CSALMongo.TurnModel.TransitionLog">
            <summary>Transition as specified by state, rule, and a list of action</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.TransitionLog.StateID">
            <summary>State ID</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.TransitionLog.RuleID">
            <summary>Rule ID</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.TransitionLog.Actions">
            <summary>List of actions</summary>
        </member>
        <member name="T:CSALMongo.TurnModel.ActionLog">
            <summary>Single action instance</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ActionLog.Agent">
            <summary>Agent performing action</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ActionLog.Act">
            <summary>What was the action</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.ActionLog.Data">
            <summary>Action-dependent data</summary>
        </member>
        <member name="T:CSALMongo.TurnModel.InputLog">
            <summary>
            Single event instance
            </summary>
        </member>
        <member name="P:CSALMongo.TurnModel.InputLog.AllText">
            <summary>All test</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.InputLog.CurrentText">
            <summary>Current Text</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.InputLog.Event">
            <summary>Event</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.InputLog.PresentationID">
            <summary>Presentation ID</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.InputLog.PresentationHistory">
            <summary>Presentation History</summary>
        </member>
        <member name="T:CSALMongo.TurnModel.AssessmentLog">
            <summary>Single instance of assessment</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.AssessmentLog.TargetID">
            <summary>Target ID</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.AssessmentLog.AnswerType">
            <summary>Answer Type</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.AssessmentLog.Threshold">
            <summary>Threshold</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.AssessmentLog.RegExMatch">
            <summary>RegEx match</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.AssessmentLog.LSAMatch">
            <summary>LSA match</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.AssessmentLog.Match">
            <summary>Match</summary>
        </member>
        <member name="P:CSALMongo.TurnModel.AssessmentLog.Pass">
            <summary>Pass?</summary>
        </member>
        <member name="T:CSALMongo.Util">
            <summary>
            Simple utilities used in this library that don't really have a
            place anywhere else
            </summary>
        </member>
        <member name="M:CSALMongo.Util.ExtractDoc(MongoDB.Bson.BsonDocument,System.String)">
            <summary>
            Given a BSON document and a field, return the BSON document
            corresponding to src[fldName].  If that isn't possible (null
            values, incorrect type, etc) then do NOT throw an exception
            </summary>
            <param name="src">BSON doc to examine</param>
            <param name="fldName">Property to access in src</param>
            <returns>src[fldName] as a BsonDocument. If src or fldName are
            null, then return null. If src[fldName] isn't a valid document,
            then return an empty/default BsonDocument instance.</returns>
        </member>
        <member name="M:CSALMongo.Util.ExtractArray(MongoDB.Bson.BsonDocument,System.String)">
            <summary>
            Given a BSON document and a field, return the BSON array
            corresponding to src[fldName].  If that isn't possible (null
            values, incorrect type, etc) then do NOT throw an exception
            </summary>
            <param name="src">BSON doc to examine</param>
            <param name="fldName">Property to access in src</param>
            <returns>src[fldName] as a BsonArray. If src or fldName are
            null, then return null. If src[fldName] isn't a valid array,
            then return an empty/default BsonArray instance.</returns>
        </member>
    </members>
</doc>
